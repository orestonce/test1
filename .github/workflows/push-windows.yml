name: Build OpenCC v1.1.9 on Windows

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      OPENCC_VERSION: ver.1.1.9
      MINGW_PATH: C:\mingw64  # GitHub Actions 预装的 MinGW-w64

    steps:
      - name: Checkout specific version
        uses: actions/checkout@v4
        with:
          repository: BYVoid/OpenCC
          path: OpenCC
          ref: ${{ env.OPENCC_VERSION }}
          fetch-depth: 0

      - name: Set up MinGW environment
        run: |
          $env:PATH = "$env:MINGW_PATH\bin;$env:PATH"
          g++ --version  # 验证编译器

      - name: Install build dependencies
        run: |
          choco install cmake ninja -y
          refreshenv  # 刷新环境变量

      - name: Configure build
        working-directory: OpenCC
        run: |
          cmake -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_DOCUMENTATION=OFF `  # 禁用文档生成
            -DCMAKE_C_COMPILER=gcc `
            -DCMAKE_CXX_COMPILER=g++ `
            -Wno-dev  # 忽略开发警告

      - name: Build OpenCC
        working-directory: OpenCC
        run: |
          cmake --build build --config Release
          
          # 验证编译结果
          $exe_path = "build/bin/opencc.exe"
          if (-not (Test-Path $exe_path)) {
              $exe_path = "build/src/tools/opencc.exe"  # 备用路径
              if (-not (Test-Path $exe_path)) {
                  Write-Error "编译失败: 未找到 opencc.exe"
                  exit 1
              }
          }
          
          # 显示编译后的文件列表
          Get-ChildItem -Path build/bin -Recurse -ErrorAction SilentlyContinue
          Get-ChildItem -Path build/src/tools -Recurse -ErrorAction SilentlyContinue

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencc-windows-v1.1.9
          path: |
            build/bin/*.exe
            build/src/tools/*.exe  # 备用路径
          retention-days: 30
